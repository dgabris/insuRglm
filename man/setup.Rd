% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/setup.R
\name{setup}
\alias{setup}
\title{Setup your modeling workflow}
\usage{
setup(
  data_train,
  data_test = NULL,
  target,
  weight = NULL,
  offset = NULL,
  family = c("poisson", "gamma", "tweedie"),
  tweedie_p = NULL,
  simple_factors = NULL,
  keep_cols = NULL,
  seed = NULL
)
}
\arguments{
\item{data_train}{Dataframe. Training data}

\item{data_test}{Dataframe. Test data}

\item{target}{Character scalar. Name of the target variable}

\item{weight}{Character scalar. Name of the weight variable}

\item{family}{Character scalar. Name of distribution family. One of \code{poisson}, \code{tweedie} or \code{gamma}}

\item{tweedie_p}{Numeric scalar. Tweedie variance power, if family \code{tweedie} is used}

\item{simple_factors}{Character vector. Names of potential predictors. These predictors need to be \code{factor} class.}

\item{keep_cols}{Character vector. Names of columns that are not potential predictors, but should be kept in data.}

\item{seed}{Numeric scalar. Seed for random number generation. Currently doesn't have any effect.}

\item{offset.}{Character scalar. Name of the offset variable, applicable for \code{poisson} family}
}
\value{
List of class \code{setup}. Contains attributes and objects used by other functions in the package.
}
\description{
Creates a setup object that is the basis for any insuRglm modeling workflow.
This object is subsequently used as a main input in most functions in the package.
}
\note{
Short summary of the train/test datasets is written to the console
}
\examples{
require(dplyr) # for the pipe operator#'

# poisson distribution target
data('freq_train')

setup <- setup(
  data_train = freq_train,
  target = 'freq',
  offset = 'exposure',
  family = 'poisson',
  keep_cols = c('pol_nbr', 'premium')
)

# gamma distribution target
data('sev_train')

setup <- setup(
  data_train = sev_train,
  target = 'sev',
  weight = 'numclaims',
  family = 'gamma',
  keep_cols = c('pol_nbr', 'exposure', 'premium')
)

# tweedie distribution - burning cost
data('bc_train')

setup <- setup(
  data_train = bc_train,
  target = 'bc',
  weight = 'exposure',
  family = 'tweedie',
  tweedie_p = 1.75, # use tweedie::tweedie.profile to determine the best value
  keep_cols = c('pol_nbr', 'premium')
)

# tweedie distribution - loss ratio
data('lr_train')

setup <- setup(
  data_train = lr_train,
  target = 'lr',
  weight = 'premium',
  family = 'tweedie',
  tweedie_p = 1.75, # use tweedie::tweedie.profile to determine the best value
  keep_cols = c('pol_nbr', 'exposure')
)

}
